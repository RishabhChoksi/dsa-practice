[{
  "problem": {
    "id": 0,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/maximum-subarray/description/",
    "tags": [
      "arrays"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Maximum Subarray",
    "question": "Given an integer array nums, find the subarray with the largest sum, and return its sum.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
      },
      {
        "id": 1,
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The subarray [1] has the largest sum 1."
      },
      {
        "id": 2,
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "hints": [
      "If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle."
    ]
  },
  "solution": {
"solution": "class Solution {\n    public int maxSubArray(int[] nums) {\n\n        /*\n        Solution: 1\n        Simply iterate over the nums array and maintain a currentSum and maxsum\n        If current sum is becoming negative, update it to zero to avoid negative\n        contribution to the sum\n        */\n\n        int ans = nums[0], currentSum = nums[0];\n\n        for (int i = 1; i < nums.length; i++) {\n            // Never lets it become negative\n            currentSum = Math.max(currentSum, 0);\n            currentSum += nums[i];\n            ans = Math.max(currentSum, ans);\n        }\n\n        return ans;\n\n    }\n}"  }
}]