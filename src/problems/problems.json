[
  {
  "problem": {
    "id": 0,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/maximum-subarray/description/",
    "tags": [
      "arrays"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Maximum Subarray",
    "question": "Given an integer array nums, find the subarray with the largest sum, and return its sum.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
      },
      {
        "id": 1,
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The subarray [1] has the largest sum 1."
      },
      {
        "id": 2,
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "hints": [
      "If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle."
    ]
  },
  "solution": {
"solution": "class Solution {\n    public int maxSubArray(int[] nums) {\n\n        /*\n        Solution: 1\n        Simply iterate over the nums array and maintain a currentSum and maxsum\n        If current sum is becoming negative, update it to zero to avoid negative\n        contribution to the sum\n        */\n\n        int ans = nums[0], currentSum = nums[0];\n\n        for (int i = 1; i < nums.length; i++) {\n            // Never lets it become negative\n            currentSum = Math.max(currentSum, 0);\n            currentSum += nums[i];\n            ans = Math.max(currentSum, ans);\n        }\n\n        return ans;\n\n    }\n}"  }
},

{
  "problem": {
    "id": 1,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/",
    "tags": [
      "arrays","dynamic programming"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Best Time to Buy and Sell Stock",
    "question": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "prices = [7,1,5,3,6,4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell."
      },
      {
        "id": 1,
        "input": "prices = [7,6,4,3,1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= nums[i] <= 10^4"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public int maxProfit(int[] prices) {\n        /*\n        Solution 1:\n        The idea is to start from day 1 and maintain a previous minimum\n        and keep subtracting it current item ans store max profit\n        */\n        int min = prices[0], ans = 0;\n        for (int i = 1; i < prices.length; i++) {\n            int maxProfit = prices[i] - min;\n            //Only if maxProfit is greater than 0, update it,else default it to 0\n            if (maxProfit > 0) {\n                ans = Math.max(ans, maxProfit);\n            }\n            min = Math.min(min, prices[i]);\n        }\n        return ans;\n    }\n}"
  }
},

{
  "problem": {
    "id": 2,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/product-of-array-except-self/description/",
    "tags": [
      "arrays","prefix sum"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Product of Array Except Self",
    "question": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\n\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\n\nYou must write an algorithm that runs in O(n) time and without using the division operation.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [1,2,3,4]",
        "output": "[24,12,8,6]",
        "explanation": "The product of all the elements of nums except nums[0] is 2*3*4 = 24.\nThe product of all the elements of nums except nums[1] is 1*3*4 = 12.\nThe product of all the elements of nums except nums[2] is 1*2*4 = 8.\nThe product of all the elements of nums except nums[3] is 1*2*3 = 6."
      },
      {
        "id": 1,
        "input": "nums = [-1,1,0,-3,3]",
        "output": "[0,0,9,0,0]",
        "explanation": "The product of all the elements of nums except nums[0] is 1*0*-3*3 = 0.\nThe product of all the elements of nums except nums[1] is -1*0*-3*3 = 0.\nThe product of all the elements of nums except nums[2] is -1*1*-3*3 = 9.\nThe product of all the elements of nums except nums[3] is -1*1*0*3 = 0.\nThe product of all the elements of nums except nums[4] is -1*1*0*-3 = 0."
      }
    ],
    "constraints": [
      "2 <= prices.length <= 10^5",
      "-30 <= nums[i] <= 30",
      "The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer."
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public int[] productExceptSelf(int[] nums) {\n        /*\n        Since we can't use division operation, we come up with idea\n        of right shifting and left shifting the products.\n        For eg, ans[2] = nums[0] * nums[1] * nums[3]\n        We skip nums[2] by right shifting the products by adding 1 \n        at start and similarly left shifting the products by adding 1\n        at end.\n        */\n\n        int n = nums.length;\n        int[] left = new int[n];\n        int[] right = new int[n];\n\n        // Create left array\n        left[0] = 1;\n        for (int i = 1; i < n; i++) {\n            /* \n            we can't replace left[i-1] to nums[i-1], we want\n            previous computed result. nums should start from 0 hence, nums[i-1] \n            */\n            left[i] = left[i - 1] * nums[i - 1];\n        }\n\n        // create right array\n        right[n - 1] = 1;\n        for (int i = n - 2; i > -1; i--) {\n            right[i] = nums[i + 1] * right[i + 1];\n        }\n\n        // Multiply products and reuse nums array\n        for (int i = 0; i < nums.length; i++) {\n            nums[i] = left[i] * right[i];\n        }\n\n        return nums;\n    }\n}"
  }
}
,
{
  "problem": {
    "id": 3,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/rotate-array/description/",
    "tags": [
      "arrays","math", "two pointers"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Rotate Array",
    "question": "Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [1,2,3,4,5,6,7], k = 3",
        "output": "[5,6,7,1,2,3,4]",
        "explanation": "rotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]"
      },
      {
        "id": 1,
        "input": "nums = [-1,-100,3,99], k = 2",
        "output": "[3,99,-1,-100]",
        "explanation": "rotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-2^31 <= nums[i] <= 2^31 - 1",
      "0 <= k <= 10^5"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public void rotate(int[] nums, int k) {\n        /*\n        If k=n, then its one full rotation, hence no change in result\n        hence, if k=71, n=70, only one rotation k=k%n optimizes k\n        Solution 1: Standard way to reverse is 3 steps:\n        Reverse whole array, Reverse 0-k elements, Reverse k-n elements\n        */\n        int n = nums.length;\n        k = k % n;\n        reverse(0, n - 1, nums);\n        reverse(0, k - 1, nums);\n        reverse(k, n - 1, nums);\n    }\n\n    public void reverse(int start, int end, int[] arr) {\n        while (start < end) {\n            int temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n\n}"
  }
},
{
  "problem": {
    "id": 4,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/max-consecutive-ones/description/",
    "tags": [
      "arrays"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Max Consecutive Ones",
    "question": "Given a binary array nums, return the maximum number of consecutive 1's in the array.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [1,1,0,1,1,1]",
        "output": "3",
        "explanation": "The first two digits or the last three digits are consecutive 1s.\nThe maximum number of consecutive 1s is 3."
      },
      {
        "id": 1,
        "input": "nums = [1,0,1,1,0,1]",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "nums[i] is either 0 or 1"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public int findMaxConsecutiveOnes(int[] nums) {\n        /*\n        Solution 1: Maintain the max and currentSum. If nums[i]=0,\n        store currentSum if bigger than max and reset currentSum\n        */\n        int ans = 0, currentSum = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == 1) {\n                currentSum++;\n            } else {\n                currentSum = 0;\n            }\n            ans = Math.max(currentSum, ans);\n        }\n        return ans;\n    }\n}"
  }
},
{
  "problem": {
    "id": 5,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/valid-sudoku/description/",
    "tags": [
      "arrays", "hash table", "matrix"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Valid Sudoku",
    "question": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n\nEach row must contain the digits 1-9 without repetition.\n\nEach column must contain the digits 1-9 without repetition.\n\nEach of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\nNote:\n\n1.A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n\n2.Only the filled cells need to be validated according to the mentioned rules.",
    "headingImages": [
      "https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png"
       ],
    "examples": [
      {
        "id": 0,
        "input": "board = \n[\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]",
        "output": "true",
        "explanation": ""
      },
      {
        "id": 1,
        "input": "board = \n[\n  [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]",
        "output": "false",
        "explanation": "Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid."
      }
    ],
    "constraints": [
      "board.length == 9",
      "board[i].length == 9",
      "board[i][j] is a digit 1-9 or '.'"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public boolean isValidSudoku(char[][] board) {\n        /*\n        Solution 1: we create HashSet for each row, column and grid\n        and before adding any item, we check if it already exists in Set.\n        If exists, we return false. Parsing from left to right in\n        row direction is more important.\n        */\n        Set<Character> rows[] = new HashSet[9];\n        Set<Character> cols[] = new HashSet[9];\n        Set<Character> grids[] = new HashSet[9];\n\n        for (int i = 0; i < board.length; i++) {\n            rows[i] = new HashSet();\n            cols[i] = new HashSet();\n            grids[i] = new HashSet();\n        }\n        // Time Complexity is O(1) because it will run always 91 times\n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 9; j++) {\n                // This formula is important to parse matrix\n                int gridNo = ((j / 3) + (i / 3) * 3);\n                char el = board[i][j];\n                // Ignore blanks\n                if (el != '.') {\n                    // Check presence in row and \"element's current column\" and grid\n                    boolean isPresentInRow = rows[i].contains(el);\n                    boolean isPresentInCol = cols[j].contains(el);\n                    boolean isPresentInGrid = grids[gridNo].contains(el);\n\n                    if (isPresentInRow || isPresentInCol || isPresentInGrid) {\n                        return false;\n                    }\n                    rows[i].add(el);\n                    cols[j].add(el);\n                    grids[gridNo].add(el);\n                }\n            }\n        }\n        // If reached here, then return true\n        return true;\n    }\n}"
  }
},
{
  "problem": {
    "id": 6,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/valid-sudoku/description/",
    "tags": [
      "arrays", "two pointers"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Move Zeroes",
    "question": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\n\nNote that you must do this in-place without making a copy of the array.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [0,1,0,3,12]",
        "output": "[1,3,12,0,0]",
        "explanation": ""
      },
      {
        "id": 1,
        "input": "nums = [0]",
        "output": "[0]",
        "explanation": ""
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-2^31 <= nums[i] <= 2^31 - 1"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public void moveZeroes(int[] nums) {\n        /*\n        Solution 1: \n        Instead of moving 0s to the end, we move non-zeroes to start\n        and ignore zeroes. we maintain a k, which stores index of next\n        swappable index of zero and increment it after swap.\n        And yes, it will keep swapping with itself until it finds zero\n        */\n        int k = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] != 0) {\n                int temp = nums[i];\n                nums[i] = nums[k];\n                nums[k] = temp;\n                k++;\n            }\n        }\n    }\n}"
  }
},
{
  "problem": {
    "id": 7,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/sort-colors/description/",
    "tags": [
      "arrays", "two pointers","sorting"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Sort Colors",
    "question": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\n\nYou must solve this problem without using the library's sort function.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [2,0,2,1,1,0]",
        "output": "[0,0,1,1,2,2]",
        "explanation": ""
      },
      {
        "id": 1,
        "input": "nums = [2,0,1]",
        "output": "[0,1,2]",
        "explanation": ""
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 300",
      "nums[i] is either 0, 1, or 2."
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public void sortColors(int[] nums) {\n        /*\n        Solution 1:\n        We iterate only once and maintain 3 pointers - left, right, and i.\n        left stores the leftmost possible index where we can place 0.\n        right stores the rightmost possible index where we can place 2.\n        We ignore 1s, since if we place 0 and 2 to the left and right, 1s will\n        automatically stay in the middle.\n        */\n        int i = 0, left = 0, right = nums.length - 1;\n\n        // <= is more important since right might be decremented\n        // and still be eligible for swapping\n        while (i <= right) {\n            int el = nums[i];\n            if (el == 2) {\n                // Swap it to the right and decrement right\n                swap(nums, i, right);\n                right--;\n            } else if (el == 0) {\n                // Swap it to the left and increment left\n                swap(nums, i, left);\n                left++;\n                i++;\n            } else {\n                i++;\n            }\n        }\n    }\n\n    void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}"
  }
},
{
  "problem": {
    "id": 8,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/majority-element/description/",
    "tags": [
      "arrays", "hast table","divide and conquer","sorting", "counting"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Majority Element",
    "question": "Given an array nums of size n, return the majority element.\n\nThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [3,2,3]",
        "output": "3",
        "explanation": ""
      },
      {
        "id": 1,
        "input": "nums = [2,2,1,1,1,2,2]",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 5 * 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public int majorityElement(int[] nums) {\n        /*\n        Solution 1: Its a bruteforce solution in which we sort\n        the nums array and check for maxCount change, as soon \n        as it changes we note prev element as maxElement.\n        Sorting is an expensive operation, hence it bruteforce\n        \n        Arrays.sort(nums);\n        int maxCount = 0, maxElement = nums[0], currCount = 0;\n        for (int i = 1; i < nums.length; i++) {\n            int el = nums[i];\n            int prev = nums[i - 1];\n            if (prev == el) {\n                currCount++;\n            } else {\n                currCount = 0;\n            }\n            if (currCount > maxCount) {\n                maxElement = prev;\n                maxCount = currCount;\n            }\n        }\n        return maxElement;\n        */\n\n        /*\n        Solution 2: We use Boyer-Moore Majority Voting Algorithm.\n        These algorithm only works when we want to find majority among\n        elements where any element is available atleast n/2 times.\n        Everytime we get same el, we increment the vote else we decrement\n        the vote. If vote become 0, (then definitely some other element is \n        going to win) then we set current el as major element and vote it 1.\n        */\n        int majEl = nums[0];\n        int vote = 1;\n\n        for (int i = 1; i < nums.length; i++) {\n            int el = nums[i];\n            if (el == majEl) {\n                vote++;\n            } else {\n                vote--;\n            }\n            if (vote == 0) {\n                majEl = el;\n                vote++;\n            }\n        }\n        return majEl;\n\n    }\n}"
  }
},
{
  "problem": {
    "id": 9,
    "topic": "Linked List",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/intersection-of-two-linked-lists/description/",
    "tags": [
      "hast table","linked list","two pointers"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Intersection of Two Linked Lists",
    "question": "Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\n\nFor example, the following two linked lists begin to intersect at node c1:\n\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\n\nNote that the linked lists must retain their original structure after the function returns.\n\nCustom Judge:\n\nThe inputs to the judge are given as follows (your program is not given these inputs):\n1. intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.\n2. listA - The first linked list.\n3. listB - The second linked list.\n4. skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.\n5. skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.\n\nThe judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.\n",
    "headingImages": [
      "https://assets.leetcode.com/uploads/2021/03/05/160_statement.png",
      "https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png",
      "https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png",
      "https://assets.leetcode.com/uploads/2021/03/05/160_example_3.png"
       ],
    "examples": [ 
      {
        "id": 0,
        "input": "intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3",
        "output": "Intersected at '8'",
        "explanation": "The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory."
      },
      {
        "id": 1,
        "input": "intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1",
        "output": "Intersected at '2'",
        "explanation": "The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B."
      },
      {
        "id": 2,
        "input": "intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2",
        "output": "No intersection",
        "explanation": "From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null."
      }
    ],
    "constraints": [
      "The number of nodes of listA is in the m.",
      "The number of nodes of listB is in the n.",
      "1 <= m, n <= 3 * 10^4",
      "1 <= Node.val <= 10^5",
      "0 <= skipA <= m",
      "0 <= skipB <= n",
      "intersectVal is 0 if listA and listB do not intersect.",
      "intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect."
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n\n        /*\n        Solution 1: \n        Simple find lengths and skip first few nodes and start comparing\n        references using two pointers\n        */\n\n        // find lengths\n        int m = getLength(headA);\n        int n = getLength(headB);\n        int skip = m - n;\n\n        // skip unnecessary start elements\n        if (skip > 0) {\n            while (skip != 0) {\n                headA = headA.next;\n                skip--;\n            }\n        } else {\n            skip = -skip;\n            while (skip != 0) {\n                headB = headB.next;\n                skip--;\n            }\n        }\n\n        // use two pointers and compare references\n        while (headA != null || headB != null) {\n            if (headA == headB) {\n                return headA;\n            }\n            headA = headA.next;\n            headB = headB.next;\n        }\n        return null;\n\n    }\n\n    int getLength(ListNode headA) {\n        ListNode current = headA;\n        int length = 0;\n        while (current != null) {\n            length++;\n            current = current.next;\n        }\n        return length;\n    }\n}"
  }
},
{
  "problem": {
    "id": 10,
    "topic": "Linked List",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/merge-two-sorted-lists/description/",
    "tags": [
      "linked list","recursion"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Merge Two Sorted Lists",
    "question": "You are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.",
    "headingImages": [
      "https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg"
       ],
    "examples": [ 
      {
        "id": 0,
        "input": "list1 = [1,2,4], list2 = [1,3,4]",
        "output": "[1,1,2,3,4,4]",
        "explanation": ""
      },
      {
        "id": 1,
        "input": "list1 = [], list2 = []",
        "output": "[]",
        "explanation": ""
      },
      {
        "id": 2,
        "input": "list1 = [], list2 = [0]",
        "output": "[0]",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in both lists is in the range [0, 50].",
      "100 <= Node.val <= 100.",
      "Both list1 and list2 are sorted in non-decreasing order."
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        /*\n        Solution 1: \n        Simply start iterating from both of them and whichever is smaller\n        keep adding it to ans.\n        If any runs out of items, there is nothing to compare, simply attach the\n        remaining elements to answer and break;\n        */\n\n        ListNode ansHead = new ListNode(0);\n        ListNode ansHeadBackup = ansHead;\n\n        while (list1 != null || list2 != null) {\n            if (list1 != null && list2 != null) {\n                if (list1.val <= list2.val) {\n                    ansHead.next = list1;\n                    list1 = list1.next;\n                } else {\n                    ansHead.next = list2;\n                    list2 = list2.next;\n                }\n                ansHead = ansHead.next;\n            } else if (list1 != null) {\n                ansHead.next = list1;\n                break;\n            } else if (list2 != null) {\n                ansHead.next = list2;\n                break;\n            }\n        }\n        return ansHeadBackup.next;\n    }\n}"
  }
},
{
  "problem": {
    "id": 11,
    "topic": "Linked List",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/linked-list-cycle/description/",
    "tags": [
      "linked list","hash table", "two pointers"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Linked List Cycle",
    "question": "Given head, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\n\nReturn true if there is a cycle in the linked list. Otherwise, return false.\n",
    "headingImages": [
      "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png",
      "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png",
      "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png"
       ],
    "examples": [ 
      {
        "id": 0,
        "input": "head = [3,2,0,-4], pos = 1",
        "output": "true",
        "explanation": "There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed)."
      },
      {
        "id": 1,
        "input": "head = [1,2], pos = 0",
        "output": "true",
        "explanation": "There is a cycle in the linked list, where the tail connects to the 0th node."
      },
      {
        "id": 2,
        "input": "head = [1], pos = -1",
        "output": "false",
        "explanation": "There is no cycle in the linked list."
      }
    ],
    "constraints": [
      "The number of the nodes in the list is in the range [0, 10^4].",
      "-10^5 <= Node.val <= 10^5",
      "pos is -1 or a valid index in the linked-list."
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        /*\n        Solution 1:\n        We run two pointers, slow and fast.\n        Fast runs double speed. If there is a cycle, slow and fast\n        will meet and we return true else slow will reach null and \n        return false.\n        */\n        ListNode slow = head, fast = head;\n        if (head == null || head.next == null) {\n            return false;\n        }\n        // Add additional null check to avoid exception\n        while (slow != null && fast.next != null && fast.next.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n            if (slow == fast) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"
  }
},
{
  "problem": {
    "id": 12,
    "topic": "Linked List",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/reverse-linked-list/description/",
    "tags": [
      "linked list","recursion"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Reverse Linked List",
    "question": "Given the head of a singly linked list, reverse the list, and return the reversed list.\n",
    "headingImages": [
      "https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg",
      "https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg",
      "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png"
       ],
    "examples": [ 
      {
        "id": 0,
        "input": "head = [1,2,3,4,5]",
        "output": "[5,4,3,2,1]",
        "explanation": ""
      },
      {
        "id": 1,
        "input": "head = [1,2]",
        "output": "[2,1]",
        "explanation": ""
      },
      {
        "id": 2,
        "input": "head = []",
        "output": "[]",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the list is the range [0, 5000].",
      "-5000 <= Node.val <= 5000"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    private ListNode newHead;\n\n    public ListNode reverseList(ListNode head) {\n        /*\n        Solution 1:\n        We basically start iterating and maintain previous and current's next\n        in temp. We point current to previous.\n        Later we set previous to current and current to temp.\n        */\n        /*\n        ListNode curr=head,prev=null;\n        while(curr!=null){\n            ListNode temp = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = temp;\n        }\n        return prev;\n        */\n\n        /*\n        Solution 2:\n        We use recursion and in the base case we simply return the node and \n        store the newHead. Once we get lastNode, when we travel back upwards,\n        we set lastNode's next as current node. After completing, we set\n        last node's next as null and return newHead.\n        The idea is to set stuff while travelling back from stack.\n        */\n        if (head == null)\n            return null;\n        ListNode last = reverse(head);\n        last.next = null;\n        return newHead;\n    }\n\n    ListNode reverse(ListNode node) {\n        if (node.next == null) {\n            newHead = node;\n            return node;\n        } else {\n            ListNode last = reverse(node.next);\n            last.next = node;\n            return node;\n        }\n    }\n}"
  }
},
{
  "problem": {
    "id": 13,
    "topic": "Linked List",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/palindrome-linked-list/description/",
    "tags": [
      "linked list","recursion","two pointers","stack"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Palindrome Linked List",
    "question": "Given the head of a singly linked list, return true if it is a palindrome or false otherwise.\n",
    "headingImages": [
      "https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg",
      "https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg"
       ],
    "examples": [ 
      {
        "id": 0,
        "input": "head = [1,2,2,1]",
        "output": "true",
        "explanation": ""
      },
      {
        "id": 1,
        "input": "head = [1,2]",
        "output": "false",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [1, 10^5]",
      "0 <= Node.val <= 9"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        /*\n        Solution 1: \n        Simply find mid, reverse from mid and compare mid and from head\n        */\n\n        ListNode mid = getMid(head);\n        ListNode reversedHalf = reverse(mid);\n        while (reversedHalf != null) {\n            if (reversedHalf.val != head.val) {\n                return false;\n            }\n            reversedHalf = reversedHalf.next;\n            head = head.next;\n        }\n        return true;\n    }\n\n    ListNode getMid(ListNode node) {\n        ListNode slow = node, fast = node;\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        return slow;\n    }\n\n    ListNode reverse(ListNode head) {\n        ListNode curr = head, prev = null;\n        while (curr != null) {\n            ListNode temp = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = temp;\n        }\n        return prev;\n    }\n}"
  }
}
,
{
  "problem": {
    "id": 14,
    "topic": "Linked List",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/linked-list-cycle-ii/description/",
    "tags": [
      "linked list","hash table","two pointers"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Linked List Cycle II",
    "question": "Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\n\nDo not modify the linked list.\n\n",
    "headingImages": [
      "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png",
      "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png",
      "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png"
       ],
    "examples": [ 
      {
        "id": 0,
        "input": "head = [3,2,0,-4], pos = 1",
        "output": "tail connects to node index 1",
        "explanation": "There is a cycle in the linked list, where tail connects to the second node."
      },
      {
        "id": 1,
        "input": "head = [1,2], pos = 0",
        "output": "tail connects to node index 0",
        "explanation": "There is a cycle in the linked list, where tail connects to the first node."
      },
      {
        "id": 2,
        "input": "head = [1], pos = -1",
        "output": "no cycle",
        "explanation": "There is no cycle in the linked list."
      }
    ],
    "constraints": [
      "The number of the nodes in the list is in the range [0, 10^4].",
      "-10^5 <= Node.val <= 10^5",
      "pos is -1 or a valid index in the linked-list."
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        /*\n        Solution 1:\n        Simply find the cycle, once you find the cycle use head/third\n        pointer and move point by point until they meet, once they meet,\n        that is the cycle point.\n        */\n\n        // base case\n        if (head == null || head.next == null) {\n            return null;\n        }\n        ListNode slow = head, fast = head;\n        while (true) {\n            slow = slow.next;\n            fast = fast.next.next;\n            // if someone reaches null, means no cycle\n            if (slow == null || fast == null || fast.next == null) {\n                return null;\n            }\n            // cycle found, let's check step by step now\n            if (slow == fast) {\n                while (head != fast) {\n                    fast = fast.next;\n                    head = head.next;\n                }\n                return head;\n            }\n        }\n    }\n}"
  }
},
{
  "problem": {
    "id": 15,
    "topic": "Linked List",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/middle-of-the-linked-list/description/",
    "tags": [
      "linked list","two pointers"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Middle of the Linked List",
    "question": "Given the head of a singly linked list, return the middle node of the linked list.\n\nIf there are two middle nodes, return the second middle node.\n\n",
    "headingImages": [
      "https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg",
      "https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg"
       ],
    "examples": [ 
      {
        "id": 0,
        "input": "head = [1,2,3,4,5]",
        "output": "[3,4,5]",
        "explanation": "The middle node of the list is node 3."
      },
      {
        "id": 1,
        "input": "head = [1,2,3,4,5,6]",
        "output": "[4,5,6]",
        "explanation": "Since the list has two middle nodes with values 3 and 4, we return the second one."
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [1, 100].",
      "1 <= Node.val <= 100"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n        /*\n        Solution 1:\n        We create two pointers slow and fast. fast runs at double speed.\n        When fast reaches the last node, slow would be at mid.\n        */\n        ListNode slow = head, fast = head;\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        return slow;\n    }\n}"
  }
},
{
  "problem": {
    "id": 16,
    "topic": "Linked List",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/",
    "tags": [
      "linked list","two pointers"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Remove Nth Node From End of List",
    "question": "Given the head of a linked list, remove the nth node from the end of the list and return its head.\n\n",
    "headingImages": [
      "https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg"
       ],
    "examples": [ 
      {
        "id": 0,
        "input": "head = [1,2,3,4,5], n = 2",
        "output": "[1,2,3,5]",
        "explanation": "T"
      },
      {
        "id": 1,
        "input": "head = [1], n = 1",
        "output": "[]",
        "explanation": ""
      },
      {
        "id": 2,
        "input": "head = [1,2], n = 1",
        "output": "[1]",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the list is sz.",
      "1 <= sz <= 30",
      "0 <= Node.val <= 100",
      "1 <= n <= sz"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        /*\n        Solution 1:\n        Simply create a distance of n between first and second pointer and then \n        go step by step, until second pointer reaches null. With these first\n        pointer would reach just before the node to be removed. After that\n        remove the node     */\n        ListNode first = head, second = head;\n         // We want to be one step before the el so n+1\n        for (int i = 0; i < n + 1; i++) {\n         //if second reaches null, it means we are trying to remove first element\n            if (second == null) {\n                head = head.next;\n                return head;\n            }\n            second = second.next;\n        }\n        while (second != null) {\n            first = first.next;\n            second = second.next;\n        }\n        // delete the element\n        first.next = first.next.next;\n\n        return head;\n    }\n}"
  }
},
{
  "problem": {
    "id": 17,
    "topic": "Linked List",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/add-two-numbers/description/",
    "tags": [
      "linked list","math", "recursion"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Add Two Numbers",
    "question": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.",
    "headingImages": [
      "https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg"
       ],
    "examples": [ 
      {
        "id": 0,
        "input": "l1 = [2,4,3], l2 = [5,6,4]",
        "output": "[7,0,8]",
        "explanation": "342 + 465 = 807."
      },
      {
        "id": 1,
        "input": "l1 = [0], l2 = [0]",
        "output": "[0]",
        "explanation": ""
      },
      {
        "id": 2,
        "input": "l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]",
        "output": "[8,9,9,9,0,0,0,1]",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in each linked list is in the range [1, 100].",
      "0 <= Node.val <= 9",
      "It is guaranteed that the list represents a number that does not have leading zeros."
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        /*\n        Solution 1: \n        Maintain a carry and keep adding it to next elements.\n        Remove the last digit by using modulus and first digit using\n        division. If still carry isn't zero, add it to the result\n        */\n        int carry = 0;\n        ListNode ans = new ListNode(0);\n        ListNode ansHead = ans;\n        while (l1 != null || l2 != null) {\n\n            if (l1 != null) {\n                carry += l1.val;\n                l1 = l1.next;\n            }\n\n            if (l2 != null) {\n                carry += l2.val;\n                l2 = l2.next;\n            }\n            ans.next = new ListNode(carry % 10);\n            ans = ans.next;\n            carry = carry / 10;\n        }\n\n        if (carry != 0)\n            ans.next = new ListNode(carry);\n\n        return ansHead.next;\n    }\n}"
  }
},
{
  "problem": {
    "id": 18,
    "topic": "Linked List",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/reorder-list/",
    "tags": [
      "linked list","two pointers", "recursion","stack"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Reorder List",
    "question": "You are given the head of a singly linked-list. The list can be represented as:\n\nL0 → L1 → … → Ln - 1 → Ln\n\nReorder the list to be on the following form:\n\nL0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …\n\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.\n\n",
    "headingImages": [
      "https://assets.leetcode.com/uploads/2021/03/04/reorder1linked-list.jpg",
      "https://assets.leetcode.com/uploads/2021/03/09/reorder2-linked-list.jpg"
       ],
    "examples": [ 
      {
        "id": 0,
        "input": "head = [1,2,3,4]",
        "output": "[1,4,2,3]",
        "explanation": ""
      },
      {
        "id": 1,
        "input": "head = [1,2,3,4,5]",
        "output": "[1,5,2,4,3]",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [1, 5 * 10^4].",
      "1 <= Node.val <= 1000"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public void reorderList(ListNode head) {\n        /*\n        Solution 1: \n        Find the mid and reverse from it and make it as second half.\n        The place from where you found mid, make it as null and make\n        it as first half.\n        Merge the two using two pointers\n        */\n\n        // Find middle of the list\n        ListNode slow = head, fast = head;\n        while (fast != null && fast.next != null && fast.next.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        // Split the list into 2 halves\n        ListNode secondHalf = slow.next;\n        slow.next = null;\n\n        // Reverse the secondHalf\n        secondHalf = reverse(secondHalf);\n\n        ListNode firstHalf = head;\n        while (secondHalf != null) {\n            ListNode firstNext = firstHalf.next;\n            ListNode secondNext = secondHalf.next;\n\n            firstHalf.next = secondHalf;\n            secondHalf.next = firstNext;\n\n            firstHalf = firstNext;\n            secondHalf = secondNext;\n        }\n\n    }\n\n    ListNode reverse(ListNode head) {\n        ListNode curr = head, prev = null;\n        while (curr != null) {\n            ListNode temp = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = temp;\n        }\n        return prev;\n    }\n}"
  }
}
,
{
  "problem": {
    "id": 19,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/reorder-list/",
    "tags": [
      "arrays","hash table"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Two Sum",
    "question": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.\n\n",
    "headingImages": [
       ],
    "examples": [ 
      {
        "id": 0,
        "input": "nums = [2,7,11,15], target = 9",
        "output": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      },
      {
        "id": 1,
        "input": "nums = [3,2,4], target = 6",
        "output": "[1,2]",
        "explanation": ""
      },
      {
        "id": 2,
        "input": "nums = [3,3], target = 6",
        "output": "[0,1]",
        "explanation": ""
      }
    ],
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        /*\n        Solution 1: \n        Simply iterate and look for diff in map, if diff is present\n        in map, means we found the match else insert element as key and\n        index as value in map\n        */\n        HashMap<Integer, Integer> map = new HashMap();\n\n        for (int i = 0; i < nums.length; i++) {\n            int diff = target - nums[i];\n            if (map.containsKey(diff)) {\n                return new int[] { map.get(diff), i };\n            } else {\n                map.put(nums[i], i);\n            }\n        }\n        return null;\n    }\n}"
  }
},
{
  "problem": {
    "id": 20,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/3sum/description/",
    "tags": [
      "arrays","two pointers", "sorting"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "3Sum",
    "question": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\n\nNotice that the solution set must not contain duplicate triplets.\n\n",
    "headingImages": [
       ],
    "examples": [ 
      {
        "id": 0,
        "input": "nums = [-1,0,1,2,-1,-4]",
        "output": "[[-1,-1,2],[-1,0,1]]",
        "explanation": "nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\n\nNotice that the order of the output and the order of the triplets does not matter.\n"
      },
      {
        "id": 1,
        "input": "nums = [0,1,1]",
        "output": "[]",
        "explanation": "The only possible triplet does not sum up to 0."
      },
      {
        "id": 2,
        "input": "nums = [0,0,0]",
        "output": "[[0,0,0]]",
        "explanation": "The only possible triplet sums up to 0."
      }
    ],
    "constraints": [
      "3 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        /*\n        Solution 1: \n        Simply sort the array. Start with first element and use two pointer\n        pointing the second to last and once found and add them to the\n        set. If you find that previous and current element is same, skip the\n        current since it will have same result. Use set to avoid duplicates.\n        Remember, set compares the elements one by one before storing them, so\n        leverage that.\n        */\n\n        Arrays.sort(nums);\n        HashSet<List<Integer>> set = new HashSet();\n\n        for (int i = 0; i < nums.length; i++) {\n            int currEl = nums[i], target = -currEl;\n            int fp = i + 1, sp = nums.length - 1;\n            // skip if same\n            if (i >= 1 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            while (fp < sp) {\n                int sum = nums[fp] + nums[sp];\n                if (sum == target) {\n                    set.add(List.of(currEl, nums[fp], nums[sp]));\n                    fp++;\n                }\n                if (sum < target) {\n                    fp++;\n                } else if (sum > target) {\n                    sp--;\n                }\n            }\n        }\n        return new ArrayList(set);\n    }\n}"
  }
}



]