[{
    "problem": {
      "id": 0,
      "topic": "Arrays",
      "source": "Leetcode",
      "url": "https://leetcode.com/problems/maximum-subarray/description/",
      "tags": [
        "arrays"
      ],
      "difficultyLevel": "Easy"
    },
    "question": {
      "heading": "Maximum Subarray",
      "question": "Given an integer array nums, find the subarray with the largest sum, and return its sum.",
      "headingImages": [
         ],
      "examples": [
        {
          "id": 0,
          "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
          "output": "6",
          "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
        },
        {
          "id": 1,
          "input": "nums = [1]",
          "output": "1",
          "explanation": "The subarray [1] has the largest sum 1."
        },
        {
          "id": 2,
          "input": "nums = [5,4,-1,7,8]",
          "output": "23",
          "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
        }
      ],
      "constraints": [
        "1 <= nums.length <= 10^5",
        "-10^4 <= nums[i] <= 10^4"
      ],
      "hints": [
        "If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle."
      ]
    },
    "solution": {
      "solution": "class Solution {\n    public boolean isPalindrome(int[] x) {\n        if (x < 0 || (x % 10 == 0 && x != 0)) {\n            return false;\n        }\n        int reversed = 0;\n        while (x > reversed) {\n            reversed = reversed * 10 + x % 10;\n            x = x / 10;\n        }\n        return x == reversed || x == reversed / 10;\n    }\n}"
    }
}]