[
  {
  "problem": {
    "id": 0,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/maximum-subarray/description/",
    "tags": [
      "arrays"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Maximum Subarray",
    "question": "Given an integer array nums, find the subarray with the largest sum, and return its sum.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
      },
      {
        "id": 1,
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The subarray [1] has the largest sum 1."
      },
      {
        "id": 2,
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum 23."
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "hints": [
      "If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle."
    ]
  },
  "solution": {
"solution": "class Solution {\n    public int maxSubArray(int[] nums) {\n\n        /*\n        Solution: 1\n        Simply iterate over the nums array and maintain a currentSum and maxsum\n        If current sum is becoming negative, update it to zero to avoid negative\n        contribution to the sum\n        */\n\n        int ans = nums[0], currentSum = nums[0];\n\n        for (int i = 1; i < nums.length; i++) {\n            // Never lets it become negative\n            currentSum = Math.max(currentSum, 0);\n            currentSum += nums[i];\n            ans = Math.max(currentSum, ans);\n        }\n\n        return ans;\n\n    }\n}"  }
},

{
  "problem": {
    "id": 1,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/",
    "tags": [
      "arrays","dynamic programming"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Best Time to Buy and Sell Stock",
    "question": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "prices = [7,1,5,3,6,4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell."
      },
      {
        "id": 1,
        "input": "prices = [7,6,4,3,1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= nums[i] <= 10^4"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public int maxProfit(int[] prices) {\n        /*\n        Solution 1:\n        The idea is to start from day 1 and maintain a previous minimum\n        and keep subtracting it current item ans store max profit\n        */\n        int min = prices[0], ans = 0;\n        for (int i = 1; i < prices.length; i++) {\n            int maxProfit = prices[i] - min;\n            //Only if maxProfit is greater than 0, update it,else default it to 0\n            if (maxProfit > 0) {\n                ans = Math.max(ans, maxProfit);\n            }\n            min = Math.min(min, prices[i]);\n        }\n        return ans;\n    }\n}"
  }
},

{
  "problem": {
    "id": 2,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/product-of-array-except-self/description/",
    "tags": [
      "arrays","prefix sum"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Product of Array Except Self",
    "question": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\n\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\n\nYou must write an algorithm that runs in O(n) time and without using the division operation.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [1,2,3,4]",
        "output": "[24,12,8,6]",
        "explanation": "The product of all the elements of nums except nums[0] is 2*3*4 = 24.\nThe product of all the elements of nums except nums[1] is 1*3*4 = 12.\nThe product of all the elements of nums except nums[2] is 1*2*4 = 8.\nThe product of all the elements of nums except nums[3] is 1*2*3 = 6."
      },
      {
        "id": 1,
        "input": "nums = [-1,1,0,-3,3]",
        "output": "[0,0,9,0,0]",
        "explanation": "The product of all the elements of nums except nums[0] is 1*0*-3*3 = 0.\nThe product of all the elements of nums except nums[1] is -1*0*-3*3 = 0.\nThe product of all the elements of nums except nums[2] is -1*1*-3*3 = 9.\nThe product of all the elements of nums except nums[3] is -1*1*0*3 = 0.\nThe product of all the elements of nums except nums[4] is -1*1*0*-3 = 0."
      }
    ],
    "constraints": [
      "2 <= prices.length <= 10^5",
      "-30 <= nums[i] <= 30",
      "The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer."
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public int[] productExceptSelf(int[] nums) {\n        /*\n        Since we can't use division operation, we come up with idea\n        of right shifting and left shifting the products.\n        For eg, ans[2] = nums[0] * nums[1] * nums[3]\n        We skip nums[2] by right shifting the products by adding 1 \n        at start and similarly left shifting the products by adding 1\n        at end.\n        */\n\n        int n = nums.length;\n        int[] left = new int[n];\n        int[] right = new int[n];\n\n        // Create left array\n        left[0] = 1;\n        for (int i = 1; i < n; i++) {\n            /* \n            we can't replace left[i-1] to nums[i-1], we want\n            previous computed result. nums should start from 0 hence, nums[i-1] \n            */\n            left[i] = left[i - 1] * nums[i - 1];\n        }\n\n        // create right array\n        right[n - 1] = 1;\n        for (int i = n - 2; i > -1; i--) {\n            right[i] = nums[i + 1] * right[i + 1];\n        }\n\n        // Multiply products and reuse nums array\n        for (int i = 0; i < nums.length; i++) {\n            nums[i] = left[i] * right[i];\n        }\n\n        return nums;\n    }\n}"
  }
}
,
{
  "problem": {
    "id": 3,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/rotate-array/description/",
    "tags": [
      "arrays","math", "two pointers"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Rotate Array",
    "question": "Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [1,2,3,4,5,6,7], k = 3",
        "output": "[5,6,7,1,2,3,4]",
        "explanation": "rotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]"
      },
      {
        "id": 1,
        "input": "nums = [-1,-100,3,99], k = 2",
        "output": "[3,99,-1,-100]",
        "explanation": "rotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-2^31 <= nums[i] <= 2^31 - 1",
      "0 <= k <= 10^5"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public void rotate(int[] nums, int k) {\n        /*\n        If k=n, then its one full rotation, hence no change in result\n        hence, if k=71, n=70, only one rotation k=k%n optimizes k\n        Solution 1: Standard way to reverse is 3 steps:\n        Reverse whole array, Reverse 0-k elements, Reverse k-n elements\n        */\n        int n = nums.length;\n        k = k % n;\n        reverse(0, n - 1, nums);\n        reverse(0, k - 1, nums);\n        reverse(k, n - 1, nums);\n    }\n\n    public void reverse(int start, int end, int[] arr) {\n        while (start < end) {\n            int temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n\n}"
  }
},
{
  "problem": {
    "id": 4,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/max-consecutive-ones/description/",
    "tags": [
      "arrays"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Max Consecutive Ones",
    "question": "Given a binary array nums, return the maximum number of consecutive 1's in the array.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [1,1,0,1,1,1]",
        "output": "3",
        "explanation": "The first two digits or the last three digits are consecutive 1s.\nThe maximum number of consecutive 1s is 3."
      },
      {
        "id": 1,
        "input": "nums = [1,0,1,1,0,1]",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "nums[i] is either 0 or 1"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public int findMaxConsecutiveOnes(int[] nums) {\n        /*\n        Solution 1: Maintain the max and currentSum. If nums[i]=0,\n        store currentSum if bigger than max and reset currentSum\n        */\n        int ans = 0, currentSum = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == 1) {\n                currentSum++;\n            } else {\n                currentSum = 0;\n            }\n            ans = Math.max(currentSum, ans);\n        }\n        return ans;\n    }\n}"
  }
},
{
  "problem": {
    "id": 5,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/valid-sudoku/description/",
    "tags": [
      "arrays", "hash table", "matrix"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Valid Sudoku",
    "question": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\n\nEach row must contain the digits 1-9 without repetition.\n\nEach column must contain the digits 1-9 without repetition.\n\nEach of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\n\nNote:\n\n1.A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n\n2.Only the filled cells need to be validated according to the mentioned rules.",
    "headingImages": [
      "https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png"
       ],
    "examples": [
      {
        "id": 0,
        "input": "board = \n[\n  [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]",
        "output": "true",
        "explanation": ""
      },
      {
        "id": 1,
        "input": "board = \n[\n  [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],\n  [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],\n  [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],\n  [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],\n  [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],\n  [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],\n  [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],\n  [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],\n  [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]\n]",
        "output": "false",
        "explanation": "Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid."
      }
    ],
    "constraints": [
      "board.length == 9",
      "board[i].length == 9",
      "board[i][j] is a digit 1-9 or '.'"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public boolean isValidSudoku(char[][] board) {\n        /*\n        Solution 1: we create HashSet for each row, column and grid\n        and before adding any item, we check if it already exists in Set.\n        If exists, we return false. Parsing from left to right in\n        row direction is more important.\n        */\n        Set<Character> rows[] = new HashSet[9];\n        Set<Character> cols[] = new HashSet[9];\n        Set<Character> grids[] = new HashSet[9];\n\n        for (int i = 0; i < board.length; i++) {\n            rows[i] = new HashSet();\n            cols[i] = new HashSet();\n            grids[i] = new HashSet();\n        }\n        // Time Complexity is O(1) because it will run always 91 times\n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 9; j++) {\n                // This formula is important to parse matrix\n                int gridNo = ((j / 3) + (i / 3) * 3);\n                char el = board[i][j];\n                // Ignore blanks\n                if (el != '.') {\n                    // Check presence in row and \"element's current column\" and grid\n                    boolean isPresentInRow = rows[i].contains(el);\n                    boolean isPresentInCol = cols[j].contains(el);\n                    boolean isPresentInGrid = grids[gridNo].contains(el);\n\n                    if (isPresentInRow || isPresentInCol || isPresentInGrid) {\n                        return false;\n                    }\n                    rows[i].add(el);\n                    cols[j].add(el);\n                    grids[gridNo].add(el);\n                }\n            }\n        }\n        // If reached here, then return true\n        return true;\n    }\n}"
  }
},
{
  "problem": {
    "id": 6,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/valid-sudoku/description/",
    "tags": [
      "arrays", "two pointers"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Move Zeroes",
    "question": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\n\nNote that you must do this in-place without making a copy of the array.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [0,1,0,3,12]",
        "output": "[1,3,12,0,0]",
        "explanation": ""
      },
      {
        "id": 1,
        "input": "nums = [0]",
        "output": "[0]",
        "explanation": ""
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-2^31 <= nums[i] <= 2^31 - 1"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public void moveZeroes(int[] nums) {\n        /*\n        Solution 1: \n        Instead of moving 0s to the end, we move non-zeroes to start\n        and ignore zeroes. we maintain a k, which stores index of next\n        swappable index of zero and increment it after swap.\n        And yes, it will keep swapping with itself until it finds zero\n        */\n        int k = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] != 0) {\n                int temp = nums[i];\n                nums[i] = nums[k];\n                nums[k] = temp;\n                k++;\n            }\n        }\n    }\n}"
  }
},
{
  "problem": {
    "id": 7,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/sort-colors/description/",
    "tags": [
      "arrays", "two pointers","sorting"
    ],
    "difficultyLevel": "Medium"
  },
  "question": {
    "heading": "Sort Colors",
    "question": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\n\nYou must solve this problem without using the library's sort function.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [2,0,2,1,1,0]",
        "output": "[0,0,1,1,2,2]",
        "explanation": ""
      },
      {
        "id": 1,
        "input": "nums = [2,0,1]",
        "output": "[0,1,2]",
        "explanation": ""
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 300",
      "nums[i] is either 0, 1, or 2."
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public void sortColors(int[] nums) {\n        /*\n        Solution 1:\n        We iterate only once and maintain 3 pointers - left, right, and i.\n        left stores the leftmost possible index where we can place 0.\n        right stores the rightmost possible index where we can place 2.\n        We ignore 1s, since if we place 0 and 2 to the left and right, 1s will\n        automatically stay in the middle.\n        */\n        int i = 0, left = 0, right = nums.length - 1;\n\n        // <= is more important since right might be decremented\n        // and still be eligible for swapping\n        while (i <= right) {\n            int el = nums[i];\n            if (el == 2) {\n                // Swap it to the right and decrement right\n                swap(nums, i, right);\n                right--;\n            } else if (el == 0) {\n                // Swap it to the left and increment left\n                swap(nums, i, left);\n                left++;\n                i++;\n            } else {\n                i++;\n            }\n        }\n    }\n\n    void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}"
  }
},
{
  "problem": {
    "id": 8,
    "topic": "Arrays",
    "source": "Leetcode",
    "url": "https://leetcode.com/problems/majority-element/description/",
    "tags": [
      "arrays", "hast table","divide and conquer","sorting", "counting"
    ],
    "difficultyLevel": "Easy"
  },
  "question": {
    "heading": "Majority Element",
    "question": "Given an array nums of size n, return the majority element.\n\nThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.",
    "headingImages": [
       ],
    "examples": [
      {
        "id": 0,
        "input": "nums = [3,2,3]",
        "output": "3",
        "explanation": ""
      },
      {
        "id": 1,
        "input": "nums = [2,2,1,1,1,2,2]",
        "output": "2",
        "explanation": ""
      }
    ],
    "constraints": [
      "n == nums.length",
      "1 <= n <= 5 * 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "hints": [
    ]
  },
  "solution": {
    "solution": "class Solution {\n    public int majorityElement(int[] nums) {\n        /*\n        Solution 1: Its a bruteforce solution in which we sort\n        the nums array and check for maxCount change, as soon \n        as it changes we note prev element as maxElement.\n        Sorting is an expensive operation, hence it bruteforce\n        \n        Arrays.sort(nums);\n        int maxCount = 0, maxElement = nums[0], currCount = 0;\n        for (int i = 1; i < nums.length; i++) {\n            int el = nums[i];\n            int prev = nums[i - 1];\n            if (prev == el) {\n                currCount++;\n            } else {\n                currCount = 0;\n            }\n            if (currCount > maxCount) {\n                maxElement = prev;\n                maxCount = currCount;\n            }\n        }\n        return maxElement;\n        */\n\n        /*\n        Solution 2: We use Boyer-Moore Majority Voting Algorithm.\n        These algorithm only works when we want to find majority among\n        elements where any element is available atleast n/2 times.\n        Everytime we get same el, we increment the vote else we decrement\n        the vote. If vote become 0, (then definitely some other element is \n        going to win) then we set current el as major element and vote it 1.\n        */\n        int majEl = nums[0];\n        int vote = 1;\n\n        for (int i = 1; i < nums.length; i++) {\n            int el = nums[i];\n            if (el == majEl) {\n                vote++;\n            } else {\n                vote--;\n            }\n            if (vote == 0) {\n                majEl = el;\n                vote++;\n            }\n        }\n        return majEl;\n\n    }\n}"
  }
}


]